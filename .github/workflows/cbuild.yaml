name: Build DrelbsOS Kernel (Containerized)

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

env:
  IMAGE_BASE_NAME: drelbsos-kernel
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  BUILDER_IMAGE: fedora_builder

jobs:
  build_kernel:
    environment: prod
    strategy:
      fail-fast: false
      matrix:
        arch: ["x86_64"]
        fedora_version: [42]
    runs-on: ${{ 'ubuntu-24.04' }}

    steps:
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v9

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore ccache
        # Don't use cache on releases as github does not allow it
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/cache/restore@v4
        with:
          path: ccache
          key: ccache-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ matrix.arch }}

      - name: Determine latest Fedora kernel version
        id: kernel-version
        run: |
          FEDORA_MAJOR_VERSION="${{ matrix.fedora_version }}"
          ARCH="${{ matrix.arch }}"
          KERNEL_VER=$(sudo podman run --rm fedora:${{ matrix.fedora_version }} dnf --releasever=${{ matrix.fedora_version }} info kernel-core | grep Source | awk '{sub(/\.src\.rpm$/,"",$3); print $3}')
          echo "Found kernel version $KERNEL_VER"
          echo "version=$KERNEL_VER" >> $GITHUB_OUTPUT

      - name: Create Build Environment
        run: |
          FEDORA_MAJOR_VERSION="${{ matrix.fedora_version }}"
          sudo podman build -f Containerfile.drelbsbase . --tag '${{ env.BUILDER_IMAGE }}:${{ steps.kernel-version.outputs.version }}' \
            --build-arg FEDORA_MAJOR_VERSION=${{ matrix.fedora_version }} \
            --env CCACHE_DIR=/workspace/ccache \
            --env CCACHE_MAXSIZE=5G \
            --env CCACHE_COMPRESS=1 \
            -v $(pwd)/ccache:/workspace/ccache

      - name: Print ccache stats
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          sudo apt install -y ccache
          ccache -s

      - name: Push To GHCR
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        run: |
          sudo podman push ${{ env.BUILDER_IMAGE }}:${{ steps.kernel-version.outputs.version }} docker://${{ env.IMAGE_REGISTRY }}/drelbsos-kernel:${{ matrix.fedora_version }} --creds "${{ env.REGISTRY_USER }}:${{ env.REGISTRY_PASSWORD }}"
          sudo podman push ${{ env.BUILDER_IMAGE }}:${{ steps.kernel-version.outputs.version }} docker://${{ env.IMAGE_REGISTRY }}/drelbsos-kernel:${{ steps.kernel-version.outputs.version }} --creds "${{ env.REGISTRY_USER }}:${{ env.REGISTRY_PASSWORD }}"

      # We always want to save the newest ccache
      - name: Backup ccache
        # Don't use cache on releases as github does not allow it
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/cache/save@v4
        with:
          path: ccache
          key: ccache-${{ matrix.arch }}-${{ github.sha }}
